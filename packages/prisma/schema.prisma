// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPermissionRole {
  USER
  ADMIN
  ADMIN_APPROVER
}

enum DiscountType {
  FLAT
  PERCENTAGE
}

enum DiscountConditionsTypeForUser {
  USE_ONCE
  FIRST_ORDER
}

enum PaymentType {
  ALL
  COD
  UPI
}

enum UserAccountStatus {
  ACTIVE
  PENDING
}


enum DiscountStatus {
  ACTIVE
  NOT_ACTIVE
}

enum ReturnStatus {
  PENDING
  ACCEPTED
  REJECTED

  RETURN_ACCEPTED
  RETURN_REJECTED
  RETURN_INITIATED
  RETURN_PICKED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
}

enum ReplacementOrderStatus {
   RECEIVED
   REJECTED
   INITIATED
   ACCEPTED
   PICKED
}

enum ProductStatus {
  CANCELED
  PACKING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURN_INITIATED
  RETURN_ACCEPTED
  RETURN_REJECTED
  REPLACEMENT_INITIATED
  REPLACEMENT_ACCEPTED
  REPLACEMENT_REJECTED
  PENDING
}

// Modify the status later
enum OrderStatus {
  CONFIRMED
  CANCELED
  PACKING
  SHIPPED
  DELIVERED
  RETURNED
  REPLACED
  PENDING
  PACKED
}

model User {
  id            Int                @id @default(autoincrement())
  email         String             @unique
  firstName     String
  lastName      String
  dob           String?
  countryCode   String             @default("+91")
  contactNumber String             @unique
  password      String
  role          Int
  roles         Roles @relation(fields: [role], references: [id])
  addressId     Address[]
  discounts     UserDiscounts[]
  status        UserAccountStatus
  permissions   String[]
  
  cartId        Int @unique
  cart          Cart @relation(fields: [cartId], references: [id])

  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  order         Orders[]
  otp           Int 
  otpExpire     BigInt
  reviewRating  ReviewRating[]

}

enum UserPermissionType {
  API
}

//permissions.handler.ts
model Roles {
  id              Int                @id @default(autoincrement())
  roleName        UserPermissionRole @unique
  permissionType  UserPermissionType
  active          Boolean
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  rolePermissions RolePermissions[]
  users           User[]
}

model Permissions {
  id                          Int @id @default(autoincrement()) 
  permissionName              String @unique
  active                      Boolean
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  rolePermissionsIdRelation   RolePermissions[] @relation("permissionIdRelation")
  rolePermissionsNameRelation RolePermissions[] @relation("permissionNameRelation")
}

model RolePermissions {
  id                      Int @id @default(autoincrement())
  permissionId            Int 
  permissionsIdRelation   Permissions @relation("permissionIdRelation", fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionName          String 
  permissionsNameRelation Permissions @relation("permissionNameRelation", fields: [permissionName], references: [permissionName], onDelete: Cascade, onUpdate: Cascade)
  roleId                  Int
  role                    Roles @relation(fields: [roleId], references: [id])
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

enum AddressType {
  CUSTOMER
  COMPANY_WAREHOURSE
}

// addressName stays optional coz when user is placing 
// a order and want to input the address directly
// instead of using a old address, then we don't
// expect the user to input the address name.
model Address {
  id            Int         @id @default(autoincrement())
  type          AddressType @default(CUSTOMER)
  addressName   String?
  contactName   String
  countryCode   String      @default("+91")
  contactNumber String
  location      String
  landmark      String?
  pincode       String
  city          String
  state         String
  userId        Int
  user          User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  createAt      DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  order         Orders[]

  @@unique([addressName, userId])
}

//model Mobile {
//id            Int       @id @default(autoincrement())
//countryCode   String    @default("+91")
//contactNumber String    @unique
//address       Address[]
//user          User?
//createdAt     DateTime  @default(now())
//updatedAt     DateTime  @updatedAt

//order Orders[]
//}

model Cart {
  id        Int @id @default(autoincrement())
  cartTotal Int
  quantity  Int
  cartItems CartItems[]
  user      User?
}

model CartItems {
  id          Int @id @default(autoincrement())

  cartId      Int
  cart        Cart @relation(fields: [cartId], references: [id])

  productId   Int
  product     Products @relation(fields: [productId], references: [id])

  productSKU  String @unique
  inventory   Inventory @relation(fields: [productSKU], references: [SKU])

  size        String
  quantity    Int

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model Discounts {
  id                  Int                 @id @default(autoincrement())
  code                String
  description         String
  discount            Int
  type                DiscountType
  expiry              String
  status              DiscountStatus      @default(ACTIVE)
  useCount            BigInt?             @default(0)
  discountConditionId Int?
  discountCondition   DiscountConditions? @relation(fields: [discountConditionId], references: [id])

  users               UserDiscounts[]
  product             Products[]
  order               Orders[]
}

model UserDiscounts {
  userId      Int
  discountId  Int

  user        User      @relation(fields: [userId], references: [id])
  discount    Discounts @relation(fields: [discountId], references: [id])

  @@id([userId, discountId])
}

// most probably no discount as for the payment mode
// both min and max value can't be set together
model DiscountConditions {
  id                Int                            @id @default(autoincrement())
  conditionForUser  DiscountConditionsTypeForUser?
  minValue          Int?
  maxValue          Int?
  paymentMode       PaymentType?
  productCategoryId Int?
  ProductCategory   ProductCategories?             @relation(fields: [productCategoryId], references: [id])

  discounts         Discounts[]
}

model ProductCategorySizes {
  id             Int      @id @default(autoincrement())
  sizesAvailable String[]
  sizeChart      Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()

  ProductCategoryLink ProductCategories[]
}

model ProductCategories {
  id                Int                  @id @default(autoincrement())
  categoryName      String //example: tshirt
  subCategoryName   String // example: oversize | colar | regular 
  categorySizesId   Int
  categorySizes     ProductCategorySizes @relation(references: [id], fields: [categorySizesId])
  createAt          DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  products          Products[]
  discountCondition DiscountConditions[]
}

model ProductImage {
  id            Int      @id @default(autoincrement())
  image         String //probably s3 link
  productId     Int
  product       Products @relation(fields: [productId], references: [id])
  priorityIndex Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
}

model Products {
  id                            Int @id @default(autoincrement())

  categoryId                    Int
  category                      ProductCategories @relation(fields: [categoryId], references: [id])
  name                          String
  description                   String
  // the above field should be like [skuId1, skuId2, skuId3]
  customisable                  Boolean?   @default(false)
  //the below is the id of the product not the sku, likewise for the sibling 
  //product, cuz the size vise sku are different, so i can't just use 1 sku
  customisationOptionProductId  Int?       @unique
  customisationOptionProduct    Products?  @relation("customProduct", fields: [customisationOptionProductId], references: [id])
  customisationOptionProducts   Products[] @relation("customProduct")
  siblingProductId              Int? //https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/self-relations
  siblingProduct                Products?  @relation("siblingProductRelation", fields: [siblingProductId], references: [id]) //The quantity will decrease alongside
  siblingProducts               Products[] @relation("siblingProductRelation")
  discountId                    Int?
  discount                      Discounts? @relation(fields: [discountId], references: [id])
  finalPrice                    Int //price after discount and all
  returnAvl                     Boolean @default(true)
  tags                          String[]
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt()

  ProductImages                 ProductImage[]
  orderProducts                 OrderProducts[]
  reviewRating                  ReviewRating[]
  cartItem                      CartItems[]
  productSKUs                   Inventory[]
}

// product id is stored in the inventory so link it to 
// SKU and it make the size quantity search thing very easy
// way easy then using a join table
model Inventory {
  id                Int               @id @default(autoincrement())
  SKU               String            @unique @default(cuid()) @db.VarChar(8)
  description       String
  color             String
  skuPrice          String
  size              String
  basePrice         Int
  quantity          Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt()
  productId         Int?
  Product           Products?  @relation(fields: [productId], references: [id])
  cartItem          CartItems?
  orderProducts     OrderProducts[]

  @@unique([SKU, size])
  @@index([productId])
}

// Same productId will have multiple SKU, as productId is of product
// but in a product has different sizes, so many sizes can be in
// a product id, and that's what this table is for, 1 productId
// having multiple SKU, but SKU will be unique
// model ProductSku {
//   SKU       String @unique

//   Inventory Inventory @relation(fields: [SKU], references: [SKU])

//   @@id([SKU, productId])
// }

// Now the logic is like SKU is fixed, it's like item skeleton, inventory will refer the sku 
// id and all the quantity and  
//model Inventory {
//  // Inventory connects the vendorOrders and SkU details, we can't do it directly
//  // cuz then you need a array in SKUDetails table to keep record of all the vendor orders
//  // for that item, which can be ugly. So using inventory table can save us that headache and 
//  // we can easily keep track of the orders and when items are added to sku
//  id            Int         @id @default(autoincrement())
//  skuId         String
//  sku           SKUDetails  @relation(fields: [skuId], references: [SKU])
// 
//  createAt  DateTime @default(now())
//  updatedAt DateTime @updatedAt()
//}

model vendorOrder {
  id                      Int    @id @default(autoincrement())
  vendorName              String
  vendorAddress           String
  totalPrice              String

  advPayment              String
  advPaymentMode          String
  advPaymentDate          DateTime
  advPaymentTransactionId String

  finalPayment              String?
  finalPaymentMode          String?
  finalPaymentDate          DateTime?
  finalPaymentTransactionId String?

  orderDate     DateTime
  receivingDate DateTime?

  orderDetails String[] // ["tshirt:black:M:40", "tshirt:red:L:15"]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Payments {
  id             Int      @id @default(autoincrement())
  paymentId      String
  paymentService String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()

  order  Orders[]
  returnPayment Returns? @relation("ReturnPaymentToUser")
  returnCharge Returns? @relation("ReturnChargesByUser")
}

model Returns {
  id     Int          @id @default(autoincrement())
  status ReturnStatus @default(PENDING)

  returnReason      String
  returnReceiveDate DateTime?

  paymentId Int?      @unique
  returnPayment   Payments? @relation("ReturnPaymentToUser", fields: [paymentId], references: [id])

  returnChargeId Int @unique
  returnCharge   Payments? @relation("ReturnChargesByUser", fields: [returnChargeId], references: [id])

  orderId Int    @unique
  order   Orders @relation(fields: [orderId], references: [id])

  returnShipmentId Int?      @unique
  shipment         Shipment? @relation(fields: [returnShipmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model ReplacementReason {
  id                       Int     @id @default(autoincrement())
  description              String
  photoProofRequired       Boolean @default(false)
  videoProofRequired       Boolean @default(false)
  userCustomReasonRequired Boolean @default(false)

  replacementOrder ReplacementOrder[]
}

model ReplacementOrder {
  id Int @id @default(autoincrement())

  replacementReasonId      Int
  replacementReason        ReplacementReason @relation(fields: [replacementReasonId], references: [id])
  replacementRequiredPhoto String?
  replacementRequiredVideo String?

  quantity Int // if someone has ordered 2 t-shirt of L size but want to replace only 1, so for such cases we need the quantity
  replacementSize String
  replacementOrderStatus ReplacementOrderStatus

  //originalOrderId Int?    @unique
  //originalOrder   Orders? @relation("oldOrderRelation", fields: [originalOrderId], references: [id])

  productOrderId Int           @unique
  productOrder   OrderProducts @relation(references: [id], fields: [productOrderId])

  // addressId Int
  // Address   Address @relation(fields: [addressId], references: [id])

  // shipment id with which product came back not the id with which new product is dispatched
  returnShipmentId Int?      @unique
  shipment         Shipment? @relation(fields: [returnShipmentId], references: [id])

  //newOrderId Int?    @unique
  //newOrder   Orders? @relation("newOrderRelation", fields: [newOrderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Shipment {
  id                   Int    @id @default(autoincrement())
  shipmentOrderId      String @unique
  shipmentServiceName  String
  shipmentTrackingLink String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  order            Orders?
  return           Returns?
  replacementOrder ReplacementOrder?
}

enum OrderType {
  NEW
  REPLACEMENT
}

model OrderProducts {
  id            Int           @id @default(autoincrement())
  orderId       Int
  order         Orders        @relation(fields: [orderId], references: [id])
  productId     Int
  product       Products      @relation(fields: [productId], references: [id])
  productStatus ProductStatus @default(PENDING)
  size          String
  productSKU    String
  productSku    Inventory @relation(fields: [productSKU], references: [SKU])
  quantity      Int
  price         String 
  // show how many time a product has been replaced
  replacementCount Int? @default(0)
  return ReplacementOrder?
}

model Orders {
  id Int @id @default(autoincrement())

  type       OrderType? @default(NEW)
  finalPrice String

  originalOrderId Int?
  originalOrders  Orders?  @relation("orgOrder", fields: [originalOrderId], references: [id])
  relatedOrders   Orders[] @relation("orgOrder") //needed for the self-relation

  userId Int
  user   User @relation(fields: [userId], references: [id])

  productCount Int
  addressId    Int
  address      Address @relation(fields: [addressId], references: [id])

  discountId Int?
  discount   Discounts? @relation(fields: [discountId], references: [id])

  paymentStatus PaymentStatus?
  paymentId     Int? //payment will be same for replacement orders
  payment       Payments?      @relation(fields: [paymentId], references: [id])

  shipmentId Int?      @unique
  shipment   Shipment? @relation(fields: [shipmentId], references: [id])

  deliveryDate Int?

  orderStatus OrderStatus @default(PENDING)

  //invoice | NOTE : should be optional 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  return        Returns?
  reviewRating  ReviewRating[]
  orderProducts OrderProducts[]
  //oldOrderOfReplacement ReplacementOrder? @relation("oldOrderRelation")
  //newOrderOfReplacement ReplacementOrder? @relation("newOrderRelation")
}

model ReviewRating {
  id Int @id @default(autoincrement())

  orderId Int
  order   Orders @relation(fields: [orderId], references: [id])

  productId Int
  product   Products @relation(fields: [productId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  rating       Int
  review       String?
  reviewImages String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
