generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int                 @id @default(autoincrement())
  countryCode   String              @default("+91")
  contactNumber String              @unique
  role          UserPermissionRoles
  cartId        Int?                @unique
  otp           Int
  otpExpire     BigInt
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  address       Address[]
  creditNotes   CreditNotes[]
  order         Orders[]
  cart          Cart?               @relation(fields: [cartId], references: [id])
  discounts     UserDiscounts[]

  @@index([contactNumber])
}

model CreditNotes {
  id                                Int                                 @id @default(autoincrement())
  userId                            Int
  creditCode                        String
  value                             Float
  returnOrderId                     Int?
  expiryDate                        DateTime
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  creditNoteOrigin                  CreditNotePurpose?
  remainingValue                    Float
  returnOrder                       Returns?                            @relation(fields: [returnOrderId], references: [id], onDelete: Restrict)
  user                              User                                @relation(fields: [userId], references: [id])
  creditNotesPartialUseTransactions CreditNotesPartialUseTransactions[]
  orders                            Orders[]
  RefundTransactions                RefundTransactions[]
}

model CreditNotesPartialUseTransactions {
  id            Int         @id @default(autoincrement())
  creditNoteId  Int
  valueUtilised Decimal
  orderId       String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  creditNotes   CreditNotes @relation(fields: [creditNoteId], references: [id])
  order         Orders      @relation(fields: [orderId], references: [id])
}

model Cart {
  id        Int         @id @default(autoincrement())
  cartTotal Float
  quantity  Int
  cartItems CartItems[]
  user      User?
}

model CartItems {
  id               Int             @id @default(autoincrement())
  cartId           Int
  productVariantId Int
  quantity         Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  cart             Cart            @relation(fields: [cartId], references: [id])
  productVariant   ProductVariants @relation(fields: [productVariantId], references: [id])
}

model Address {
  id            Int         @id @default(autoincrement())
  type          AddressType @default(CUSTOMER)
  contactName   String
  location      String
  pincode       String
  city          String
  state         String
  email         String
  countryCode   String      @default("+91")
  contactNumber String
  userId        Int
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  order         Orders[]
}

model Discounts {
  id                  Int                 @id @default(autoincrement())
  code                String
  description         String
  discount            Int
  type                DiscountType
  expiry              String
  status              DiscountStatus      @default(ACTIVE)
  useCount            BigInt?             @default(0)
  discountConditionId Int?
  discountCondition   DiscountConditions? @relation(fields: [discountConditionId], references: [id])
  order               Orders[]
  users               UserDiscounts[]
  product             Products[]          @relation("DiscountsToProducts")
}

model UserDiscounts {
  userId     Int
  discountId Int
  discount   Discounts @relation(fields: [discountId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@id([userId, discountId])
}

model DiscountConditions {
  id                Int                            @id @default(autoincrement())
  conditionForUser  DiscountConditionsTypeForUser?
  minValue          Int?
  maxValue          Int?
  paymentMode       PaymentType?
  productCategoryId Int?
  productCategory   ProductCategory?               @relation(fields: [productCategoryId], references: [id])
  discounts         Discounts[]
}

model ProductCategorySizes {
  id            Int              @id @default(autoincrement())
  sizeChartName String
  sizeChart     Json
  categoryId    Int?             @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  productId     Int?             @unique
  category      ProductCategory? @relation(fields: [categoryId], references: [id])
  Products      Products?        @relation(fields: [productId], references: [id])
}

model ProductCategory {
  id                  Int                   @id @default(autoincrement())
  categoryName        String                @unique
  parentId            Int?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  displayName         String?
  sizeChartId         Int?
  discountCondition   DiscountConditions[]
  parent              ProductCategory?      @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children            ProductCategory[]     @relation("CategoryHierarchy")
  SizeChart           SizeChart?            @relation(fields: [sizeChartId], references: [id], onDelete: Restrict)
  productCategorySize ProductCategorySizes?
  products            Products[]
}

model ProductImage {
  id            Int      @id @default(autoincrement())
  image         String
  productId     Int
  priorityIndex Int
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Products @relation(fields: [productId], references: [id])
}

model Products {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  description          String
  price                Float
  tags                 String[]
  categoryId           Int
  soldOut              Boolean               @default(false)
  care                 String[]
  details              String[]
  sku                  String                @unique
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  visitedCount         Int                   @default(0)
  exclusive            Boolean               @default(false)
  colour               String                @default("white")
  public               Boolean               @default(false)
  sizeChartId          Int?
  ProductCategorySizes ProductCategorySizes?
  productImages        ProductImage[]
  ProductVariants      ProductVariants[]
  category             ProductCategory       @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  SizeChart            SizeChart?            @relation(fields: [sizeChartId], references: [id], onDelete: Restrict)
  discounts            Discounts[]           @relation("DiscountsToProducts")
}

model ProductVariants {
  id              Int               @id @default(autoincrement())
  productId       Int
  subSku          String            @unique @default(cuid())
  size            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  CartItems       CartItems[]
  inventory       Inventory?
  OrderProducts   OrderProducts[]
  product         Products          @relation(fields: [productId], references: [id])
  ReplacementItem ReplacementItem[]

  @@unique([productId, size])
}

model Inventory {
  id                  Int               @id @default(autoincrement())
  productVariantId    Int               @unique
  quantity            Int
  baseSkuInventoryId  Int?
  lastRestockDate     DateTime?
  lastRestockQuantity Int?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  baseSkuInventory    baseSkuInventory? @relation(fields: [baseSkuInventoryId], references: [id])
  productVariant      ProductVariants   @relation(fields: [productVariantId], references: [id])
}

model baseSkuInventory {
  id                    Int         @id @default(autoincrement())
  baseSku               String
  quantity              Int
  size                  String
  lastRestockDate       DateTime?
  lastRestockedQuantity Int?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  color                 String
  Inventory             Inventory[]
}

model vendorOrder {
  id                        Int       @id @default(autoincrement())
  vendorName                String
  vendorAddress             String
  totalPrice                Float
  advPayment                Float
  advPaymentMode            String
  advPaymentDate            DateTime
  advPaymentTransactionId   String
  finalPayment              Float?
  finalPaymentMode          String?
  finalPaymentDate          DateTime?
  finalPaymentTransactionId String?
  orderDate                 DateTime
  receivingDate             DateTime?
  orderDetails              String[]
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model Payments {
  id                  Int                  @id @default(autoincrement())
  rzpOrderId          String               @unique
  rzpPaymentId        String?              @unique
  rzpPaymentSignature String?
  paymentStatus       PaymentStatus        @default(PENDING)
  paymentService      String               @default("Razorpay")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  orderId             String               @default("")
  Orders              Orders               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  RefundTransactions  RefundTransactions[]
}

model Shipment {
  id                   Int               @id @default(autoincrement())
  shipmentOrderId      String            @unique
  shipmentServiceName  String
  shipmentTrackingLink String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  order                Orders?
  ReplacementOrder     ReplacementOrder?
  return               Returns?
}

model Orders {
  id                    String                             @id @unique
  type                  OrderType                          @default(NEW)
  creditUtilised        Int?                               @default(0)
  totalAmount           Float
  userId                Int
  productCount          Int
  addressId             Int
  discountId            Int?
  shipmentId            Int?                               @unique
  deliveryDate          BigInt?
  orderStatus           OrderStatus                        @default(PENDING)
  createdAt             DateTime                           @default(now())
  updatedAt             DateTime                           @updatedAt
  creditNoteId          Int?
  returnAcceptanceDate  BigInt?
  creditNoteTransaction CreditNotesPartialUseTransactions?
  orderProducts         OrderProducts[]
  address               Address                            @relation(fields: [addressId], references: [id])
  creditNote            CreditNotes?                       @relation(fields: [creditNoteId], references: [id])
  discount              Discounts?                         @relation(fields: [discountId], references: [id])
  shipment              Shipment?                          @relation(fields: [shipmentId], references: [id])
  user                  User                               @relation(fields: [userId], references: [id])
  Payments              Payments[]
  replacementOrder      ReplacementOrder[]
  return                Returns[]
}

model OrderProducts {
  id                  Int             @id @default(autoincrement())
  productVariantId    Int
  price               Float
  quantity            Int
  returnQuantity      Int?
  replacementQuantity Int?
  orderId             String
  rejectedQuantity    Int?            @default(0)
  reimbursedQuantity  Int             @default(0)
  order               Orders          @relation(fields: [orderId], references: [id])
  productVariant      ProductVariants @relation(fields: [productVariantId], references: [id])
  returnItem          ReturnItem[]

  @@unique([orderId, productVariantId])
}

model Returns {
  id                Int               @id @default(autoincrement())
  returnReceiveDate DateTime?
  orderId           String
  returnShipmentId  Int?              @unique
  returnStatus      ReturnStatus      @default(PENDING)
  refundAmount      Float?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  refundMode        ReturnRefundMode  @default(CREDIT)
  returnType        ReturnType        @default(RETURN)
  creditNote        CreditNotes[]
  ReplacementOrder  ReplacementOrder?
  returnItems       ReturnItem[]
  order             Orders            @relation(fields: [orderId], references: [id])
  shipment          Shipment?         @relation(fields: [returnShipmentId], references: [id])
}

model ReturnItem {
  id               Int              @id @default(autoincrement())
  status           ReturnItemStatus @default(PENDING)
  returnId         Int
  orderProductId   Int
  quantity         Int
  rejectReason     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  referenceImage   String?
  returnReason     String?
  rejectedQuantity Int?             @default(0)
  ReplacementItem  ReplacementItem?
  orderProduct     OrderProducts    @relation(fields: [orderProductId], references: [id])
  return           Returns          @relation(fields: [returnId], references: [id])
}

model ReplacementOrder {
  id               Int                    @id @default(autoincrement())
  orderId          String
  status           ReplacementOrderStatus @default(PENDING)
  returnOrderId    Int                    @unique
  shipmentId       Int?                   @unique
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  replacementItems ReplacementItem[]
  order            Orders                 @relation(fields: [orderId], references: [id])
  return           Returns                @relation(fields: [returnOrderId], references: [id])
  shipment         Shipment?              @relation(fields: [shipmentId], references: [id])
}

model ReplacementItem {
  id                    Int                      @id @default(autoincrement())
  replacementOrderId    Int
  returnItemId          Int                      @unique
  productVariantId      Int
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  nonReplaceAction      NonReplaceQantityAction?
  nonReplacableQuantity Int                      @default(0)
  productVariant        ProductVariants          @relation(fields: [productVariantId], references: [id])
  replacementOrder      ReplacementOrder         @relation(fields: [replacementOrderId], references: [id])
  returnOrderItem       ReturnItem               @relation(fields: [returnItemId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SizeChart {
  id              Int               @id @default(autoincrement())
  name            String
  value           String?
  type            SizeType
  parentId        Int?
  sortOrder       Int?              @default(0)
  createdat       DateTime?         @default(now()) @db.Timestamptz(6)
  updatedat       DateTime?         @default(now()) @db.Timestamptz(6)
  ProductCategory ProductCategory[]
  Products        Products[]
  SizeChart       SizeChart?        @relation("SizeChartToSizeChart", fields: [parentId], references: [id], onUpdate: NoAction)
  other_SizeChart SizeChart[]       @relation("SizeChartToSizeChart")

  @@index([parentId], map: "SizeChart_parentid_idx")
}

model RefundTransactions {
  id              BigInt       @id(map: "BankRefunds_pkey") @default(autoincrement())
  createdAt       DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?    @db.Timestamptz(6)
  rzpRefundId     String?      @unique(map: "BankRefunds_rzpRefundId_key")
  rzpRefundStatus String?
  rzpPaymentId    String
  bankRefundValue Int          @default(0)
  creditNoteId    Int?         @default(0)
  Payments        Payments     @relation(fields: [rzpPaymentId], references: [rzpPaymentId], onDelete: NoAction, map: "BankRefunds_rzpPaymentId_fkey")
  CreditNotes     CreditNotes? @relation(fields: [creditNoteId], references: [id], onDelete: NoAction)
}

enum OrderRtoType {
  RETURN
  REPLACEMENT
}

enum NonReplaceQantityAction {
  CREDIT
}

enum UserCreditTransactionType {
  ADD
  DEBIT
}

enum ReturnRefundMode {
  CREDIT
  REFUND
}

enum UserPermissionRoles {
  USER
  ADMIN
  ADMIN_APPROVER
}

enum DiscountType {
  FLAT
  PERCENTAGE
}

enum DiscountConditionsTypeForUser {
  USE_ONCE
  FIRST_ORDER
}

enum PaymentType {
  ALL
  COD
  UPI
}

enum UserAccountStatus {
  ACTIVE
  PENDING
}

enum DiscountStatus {
  ACTIVE
  NOT_ACTIVE
}

enum ReturnStatus {
  PENDING
  REVIEW_DONE
  CANCELLED_ADMIN
  RECEIVED
  CANCELLED
  IN_TRANSIT
}

enum ReturnItemStatus {
  PENDING
  REJECTED
  CONFIRMED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  created
  attempted
  paid
  failed
}

enum ReplacementOrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

enum ProductStatus {
  CANCELED
  CONFIRMED
  PENDING
}

enum OrderStatus {
  PENDING
  IN_TRANSIT
  ACCEPTED
  SHIPPED
  DELIVERED
  PAYMENT_FAILED
  CANCELED
}

enum UserPermissionType {
  API
}

enum AddressType {
  CUSTOMER
  COMPANY_WAREHOURSE
}

enum OrderType {
  NEW
  REPLACEMENT
}

enum ReturnType {
  RETURN
  REPLACEMENT
}

enum SizeType {
  MEASUREMENT_TYPE
  SIZE_VALUE
  DISPLAY_NAME
}

enum CreditNotePurpose {
  RETURN
  REPLACEMENT
  GIFT
}
