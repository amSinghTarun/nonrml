generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int                 @id @default(autoincrement())
  fullName      String?
  countryCode   String              @default("+91")
  contactNumber String              @unique
  email         String?             @unique
  emailVerified Boolean             @default(false)
  role          UserPermissionRoles
  cartId        Int?                @unique
  otp           Int
  otpExpire     BigInt
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  addressId     Address[]
  order         Orders[]
  cart          Cart?               @relation(fields: [cartId], references: [id])
  creditNotes   CreditNotes[]
  discounts     UserDiscounts[]

  @@index([contactNumber])
}

model CreditNotes {
  id                                Int                     @id @default(autoincrement())
  userId                            Int
  creditCode                        String                   // GWGEIR-76253 || <6_string_long_alpha>-<5_digits>
  value                             Decimal
  returnOrderId                     Int                     // the orderId it's generated from
  orderRtoType                      OrderRtoType
  redeemed                          Boolean                 @default(false)
  expiryDate                        DateTime
  createdAt                         DateTime                @default(now())
  updatedAt                         DateTime                @updatedAt
  user                              User                    @relation(fields: [userId], references: [id])
  returnOrder                       Returns                  @relation(fields: [returnOrderId], references: [id])
  creditNotesPartialUseTransactions CreditNotesPartialUseTransactions[]
  orders                            Orders[]
}

enum OrderRtoType {
  RETURN
  REPLACEMENT
}

model CreditNotesPartialUseTransactions {
  id                Int                       @id @default(autoincrement())
  creditNoteId      Int
  valueUtilised     Decimal
  orderId           String                       @unique// the orderId it is used on
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  order             Orders                    @relation(fields: [orderId], references: [id])
  creditNotes       CreditNotes               @relation(fields: [creditNoteId], references: [id])
}

model Cart {
  id        Int         @id @default(autoincrement())
  cartTotal Decimal
  quantity  Int
  cartItems CartItems[]
  user      User?
}

model CartItems {
  id               Int             @id @default(autoincrement())
  cartId           Int
  productVariantId Int
  quantity         Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  cart             Cart            @relation(fields: [cartId], references: [id])
  productVariant   ProductVariants @relation(fields: [productVariantId], references: [id])
}

model Address {
  id            Int         @id @default(autoincrement())
  type          AddressType @default(CUSTOMER)
  contactName   String
  location      String
  pincode       String
  city          String
  state         String
  email         String
  countryCode   String      @default("+91")
  contactNumber String
  userId        Int
  createAt      DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  order         Orders[]
}

model Discounts {
  id                  Int                 @id @default(autoincrement())
  code                String
  description         String
  discount            Int
  type                DiscountType
  expiry              String
  status              DiscountStatus      @default(ACTIVE)
  useCount            BigInt?             @default(0)
  discountConditionId Int?
  discountCondition   DiscountConditions? @relation(fields: [discountConditionId], references: [id])
  order               Orders[]
  users               UserDiscounts[]
  product             Products[]          @relation("DiscountsToProducts")
}

model UserDiscounts {
  userId     Int
  discountId Int
  discount   Discounts @relation(fields: [discountId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@id([userId, discountId])
}

model DiscountConditions {
  id                Int                            @id @default(autoincrement())
  conditionForUser  DiscountConditionsTypeForUser?
  minValue          Int?
  maxValue          Int?
  paymentMode       PaymentType?
  productCategoryId Int?
  productCategory   ProductCategory?               @relation(fields: [productCategoryId], references: [id])
  discounts         Discounts[]
}

model ProductCategorySizes {
  id            Int              @id @default(autoincrement())
  sizeChartName String
  sizeChart     Json
  categoryId    Int?             @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  category      ProductCategory? @relation(fields: [categoryId], references: [id])
}

model ProductCategory {
  id                  Int                   @id @default(autoincrement())
  categoryName        String                @unique
  parentId            Int?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  displayName         String?
  discountCondition   DiscountConditions[]
  parent              ProductCategory?      @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children            ProductCategory[]     @relation("CategoryHierarchy")
  productCategorySize ProductCategorySizes?
  products            Products[]
}

model ProductImage {
  id            Int      @id @default(autoincrement())
  image         String
  productId     Int
  priorityIndex Int
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Products @relation(fields: [productId], references: [id])
}

model Products {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String
  price           Decimal
  tags            String[]
  categoryId      Int
  soldOut         Boolean           @default(false)
  care            String[]
  details         String[]
  sku             String            @unique
  visitedCount    Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  exclusive       Boolean           @default(false)
  productImages   ProductImage[]
  ProductVariants ProductVariants[]
  category        ProductCategory   @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  discounts       Discounts[]       @relation("DiscountsToProducts")
}

model ProductVariants {
  id              Int               @id @default(autoincrement())
  productId       Int
  subSku          String            @unique @default(cuid())
  size            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  CartItems       CartItems[]
  inventory       Inventory?
  OrderProducts   OrderProducts[]
  product         Products          @relation(fields: [productId], references: [id])
  ReplacementItem ReplacementItem[]

  @@unique([productId, size])
}

model Inventory {
  id                  Int               @id @default(autoincrement())
  productVariantId    Int               @unique
  quantity            Int
  baseSkuInventoryId  Int?
  lastRestockDate     DateTime?
  lastRestockQuantity Int?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  baseSkuInventory    baseSkuInventory? @relation(fields: [baseSkuInventoryId], references: [id])
  productVariant      ProductVariants   @relation(fields: [productVariantId], references: [id])
}

model baseSkuInventory {
  id                    Int         @id @default(autoincrement())
  baseSku               String
  quantity              Int
  size                  String
  lastRestockDate       DateTime?
  lastRestockedQuantity Int?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  color                 String
  Inventory             Inventory[]
}

model vendorOrder {
  id                        Int       @id @default(autoincrement())
  vendorName                String
  vendorAddress             String
  totalPrice                Decimal
  advPayment                Decimal
  advPaymentMode            String
  advPaymentDate            DateTime
  advPaymentTransactionId   String
  finalPayment              Decimal?
  finalPaymentMode          String?
  finalPaymentDate          DateTime?
  finalPaymentTransactionId String?
  orderDate                 DateTime
  receivingDate             DateTime?
  orderDetails              String[]
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model Payments {
  id                  Int           @id @default(autoincrement())
  rzpOrderId          String
  rzpPaymentId        String?
  rzpPaymentSignature String?
  paymentStatus       PaymentStatus @default(PENDING)
  paymentService      String        @default("Razorpay")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  order               Orders[]
}

model Shipment {
  id                   Int               @id @default(autoincrement())
  shipmentOrderId      String            @unique
  shipmentServiceName  String
  shipmentTrackingLink String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  order                Orders?
  ReplacementOrder     ReplacementOrder?
  return               Returns?
}

model Orders {
  id                      String                  @id @unique
  type                    OrderType               @default(NEW)
  creditUtilised          Int?                    @default(0)
  totalAmount             Decimal
  userId                  Int
  productCount            Int
  addressId               Int
  creditNoteId            Int?
  discountId              Int?
  paymentId               Int?
  shipmentId              Int?                    @unique
  deliveryDate            BigInt?
  orderStatus             OrderStatus             @default(PENDING)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  orderProducts           OrderProducts[]
  address                 Address                 @relation(fields: [addressId], references: [id])
  creditNote              CreditNotes?            @relation(fields: [creditNoteId], references: [id])
  discount                Discounts?              @relation(fields: [discountId], references: [id])
  payment                 Payments?               @relation(fields: [paymentId], references: [id])
  shipment                Shipment?               @relation(fields: [shipmentId], references: [id])
  user                    User                    @relation(fields: [userId], references: [id])
  replacementOrder        ReplacementOrder[]
  return                  Returns[]
  creditNoteTransaction   CreditNotesPartialUseTransactions?
}

model OrderProducts {
  id                  Int             @id @default(autoincrement())
  productVariantId    Int
  productStatus       ProductStatus   @default(PENDING)
  price               Decimal
  quantity            Int
  returnQuantity      Int?
  replacementQuantity Int?
  orderId             String
  rejectedQuantity    Int?            @default(0)
  order               Orders          @relation(fields: [orderId], references: [id])
  productVariant      ProductVariants @relation(fields: [productVariantId], references: [id])
  returnItem          ReturnItem[]
  
  @@unique([orderId, productVariantId])
}

model Returns {
  id                      Int                     @id @default(autoincrement())
  returnReceiveDate       DateTime?
  orderId                 String
  returnShipmentId        Int?                    @unique
  returnStatus            ReturnStatus            @default(PENDING)
  refundAmount            Decimal?                @default(0)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  refundMode              ReturnRefundMode        @default(CREDIT)
  returnType              ReturnType              @default(RETURN)
  ReplacementOrder        ReplacementOrder?
  returnItems             ReturnItem[]
  order                   Orders                  @relation(fields: [orderId], references: [id])
  shipment                Shipment?               @relation(fields: [returnShipmentId], references: [id])
  creditNote              CreditNotes[] // in case user made two seperate returns so multiple credit notes will be generated
}

model ReturnItem {
  id               Int               @id @default(autoincrement())
  status           ReturnItemStatus  @default(PENDING)
  returnId         Int
  orderProductId   Int
  quantity         Int
  rejectReason     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  referenceImage   String
  returnReason     String
  acceptedQuantity Int?              @default(0)
  ReplacementItem  ReplacementItem[]
  orderProduct     OrderProducts     @relation(fields: [orderProductId], references: [id])
  return           Returns           @relation(fields: [returnId], references: [id])
}

// model ReplacementReason {
//   id                       Int                @id @default(autoincrement())
//   description              String
//   photoProofRequired       Boolean            @default(false)
//   videoProofRequired       Boolean            @default(false)
//   userCustomReasonRequired Boolean            @default(false)
//   ReplacementOrder         ReplacementOrder[]
// }

model ReplacementOrder {
  id                  Int                    @id @default(autoincrement())
  orderId             String
  status              ReplacementOrderStatus @default(PENDING)
  returnOrderId       Int                    @unique
  shipmentId          Int?                   @unique
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  replacementItems    ReplacementItem[]
  order               Orders                 @relation(fields: [orderId], references: [id])
  return              Returns                @relation(fields: [returnOrderId], references: [id])
  shipment            Shipment?              @relation(fields: [shipmentId], references: [id])
}

model ReplacementItem {
  id                    Int                       @id @default(autoincrement())
  replacementOrderId    Int
  returnItemId          Int
  productVariantId      Int
  replacementQuantity   Int                       @default(0)//how many quantities we can replace from accepted quantity(return item field)
  nonReplaceAction      NonReplaceQantityAction   @default(CREDIT)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  productVariant        ProductVariants           @relation(fields: [productVariantId], references: [id])
  replacementOrder      ReplacementOrder          @relation(fields: [replacementOrderId], references: [id])
  returnOrderItem       ReturnItem                @relation(fields: [returnItemId], references: [id])
}

enum NonReplaceQantityAction {
  CREDIT
}

enum UserCreditTransactionType {
  ADD
  DEBIT
}

enum ReturnRefundMode {
  CREDIT
  REFUND
}

enum UserPermissionRoles {
  USER
  ADMIN
  ADMIN_APPROVER
}

enum DiscountType {
  FLAT
  PERCENTAGE
}

enum DiscountConditionsTypeForUser {
  USE_ONCE
  FIRST_ORDER
}

enum PaymentType {
  ALL
  COD
  UPI
}

enum UserAccountStatus {
  ACTIVE
  PENDING
}

enum DiscountStatus {
  ACTIVE
  NOT_ACTIVE
}

enum ReturnStatus {
  PENDING
  CONFIRMED
  PICKED
  PROCESSING
  PROCESSED
}

enum ReturnItemStatus {
  PENDING
  REJECTED
  CONFIRMED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  created
  attempted
  paid
  failed
}

enum ReplacementOrderStatus {
  PENDING
  PROCESSED
  SHIPPED
  DELIVERED
}

enum ProductStatus {
  CANCELED
  CONFIRMED
  PENDING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  ACCEPTED
  SHIPPED
  DELIVERED
  PAYMENT_FAILED
  CANCELED
}

enum UserPermissionType {
  API
}

enum AddressType {
  CUSTOMER
  COMPANY_WAREHOURSE
}

enum OrderType {
  NEW
  REPLACEMENT
}

enum ReturnType {
  RETURN
  REPLACEMENT
}